
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package scanner;

import java_cup.runtime.*;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\002\007\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\007" +
    "\000\002\003\005\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\010\004\000\002\011\003\000\002\011" +
    "\004\000\002\012\006\000\002\012\003\000\002\014\004" +
    "\000\002\015\003\000\002\015\004\000\002\016\005\000" +
    "\002\016\003\000\002\017\006\000\002\017\006\000\002" +
    "\017\007\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\004" +
    "\000\002\021\004\000\002\025\020\000\002\025\017\000" +
    "\002\025\005\000\002\026\016\000\002\026\017\000\002" +
    "\026\005\000\002\022\002\000\002\022\006\000\002\022" +
    "\003\000\002\023\002\000\002\023\007\000\002\027\002" +
    "\000\002\027\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\040\012\000\002\040\010\000\002\041" +
    "\014\000\002\041\012\000\002\041\014\000\002\042\006" +
    "\000\002\046\012\000\002\046\004\000\002\043\011\000" +
    "\002\044\002\000\002\044\004\000\002\045\005\000\002" +
    "\045\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\011" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\034\004\000\002\034\006\000\002\032\005\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\035" +
    "\002\000\002\035\004\000\002\036\004\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\005\000\002\037\004\000\002" +
    "\037\004\000\002\037\007\000\002\037\004\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\005\013\000\002\005\010\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\004\043\005\001\002\000\004\002\u0115\001" +
    "\002\000\004\123\006\001\002\000\016\003\020\010\016" +
    "\017\011\031\015\041\022\054\010\001\002\000\010\017" +
    "\uffe3\031\015\041\022\001\002\000\004\123\365\001\002" +
    "\000\020\003\361\020\054\024\uffd5\027\067\033\066\046" +
    "\060\055\061\001\002\000\004\017\353\001\002\000\010" +
    "\017\uffe4\031\015\041\022\001\002\000\004\017\ufff8\001" +
    "\002\000\006\003\323\123\324\001\002\000\006\003\313" +
    "\123\314\001\002\000\012\017\ufffa\031\015\041\022\054" +
    "\010\001\002\000\004\017\305\001\002\000\010\017\ufff9" +
    "\031\015\041\022\001\002\000\006\003\023\123\024\001" +
    "\002\000\004\024\303\001\002\000\004\104\025\001\002" +
    "\000\010\003\027\105\uffda\123\030\001\002\000\004\105" +
    "\050\001\002\000\004\105\uffd8\001\002\000\004\112\031" +
    "\001\002\000\020\005\033\007\034\011\037\012\040\014" +
    "\041\015\032\016\036\001\002\000\012\017\uff9e\066\uff9e" +
    "\067\uff9e\105\uff9e\001\002\000\012\017\uff9b\066\uff9b\067" +
    "\uff9b\105\uff9b\001\002\000\012\017\uff9d\066\uff9d\067\uff9d" +
    "\105\uff9d\001\002\000\006\066\043\105\uffd7\001\002\000" +
    "\012\017\uff9c\066\uff9c\067\uff9c\105\uff9c\001\002\000\012" +
    "\017\uffa0\066\uffa0\067\uffa0\105\uffa0\001\002\000\012\017" +
    "\uff9f\066\uff9f\067\uff9f\105\uff9f\001\002\000\012\017\uff9a" +
    "\066\uff9a\067\uff9a\105\uff9a\001\002\000\004\105\uffd9\001" +
    "\002\000\004\123\044\001\002\000\004\112\045\001\002" +
    "\000\020\005\033\007\034\011\037\012\040\014\041\015" +
    "\032\016\036\001\002\000\006\066\043\105\uffd7\001\002" +
    "\000\004\105\uffd6\001\002\000\006\003\051\017\052\001" +
    "\002\000\004\017\274\001\002\000\020\003\065\020\054" +
    "\027\067\033\066\046\060\055\061\123\uffd5\001\002\000" +
    "\022\003\uffd2\020\uffd2\024\uffd2\027\uffd2\033\uffd2\046\uffd2" +
    "\055\uffd2\123\uffd2\001\002\000\004\123\254\001\002\000" +
    "\022\003\uffcf\020\uffcf\024\uffcf\027\uffcf\033\uffcf\046\uffcf" +
    "\055\uffcf\123\uffcf\001\002\000\004\123\247\001\002\000" +
    "\022\003\uffd3\020\uffd3\024\uffd3\027\uffd3\033\uffd3\046\uffd3" +
    "\055\uffd3\123\uffd3\001\002\000\022\003\110\020\054\027" +
    "\067\033\066\046\060\053\uffb1\055\061\123\112\001\002" +
    "\000\006\003\230\104\231\001\002\000\022\003\065\020" +
    "\054\024\uffd5\027\067\033\066\046\060\055\061\123\uffd5" +
    "\001\002\000\022\003\uffd0\020\uffd0\024\uffd0\027\uffd0\033" +
    "\uffd0\046\uffd0\055\uffd0\123\uffd0\001\002\000\022\003\uffd1" +
    "\020\uffd1\024\uffd1\027\uffd1\033\uffd1\046\uffd1\055\uffd1\123" +
    "\uffd1\001\002\000\024\003\uffce\020\uffce\024\uffce\027\uffce" +
    "\033\uffce\046\uffce\055\uffce\067\143\123\uffce\001\002\000" +
    "\022\003\166\025\171\051\164\062\163\104\172\123\173" +
    "\124\162\125\165\001\002\000\006\003\070\123\071\001" +
    "\002\000\004\050\153\001\002\000\004\110\072\001\002" +
    "\000\004\124\073\001\002\000\006\003\074\050\075\001" +
    "\002\000\004\124\146\001\002\000\004\124\076\001\002" +
    "\000\004\021\077\001\002\000\004\017\100\001\002\000" +
    "\022\003\110\020\054\024\uffb1\027\067\033\066\046\060" +
    "\055\061\123\112\001\002\000\034\003\uffad\020\uffad\023" +
    "\uffad\024\uffad\027\uffad\033\uffad\046\uffad\053\uffad\055\uffad" +
    "\123\uffad\124\uffad\125\uffad\126\uffad\001\002\000\004\067" +
    "\145\001\002\000\034\003\uffaa\020\uffaa\023\uffaa\024\uffaa" +
    "\027\uffaa\033\uffaa\046\uffaa\053\uffaa\055\uffaa\123\uffaa\124" +
    "\uffaa\125\uffaa\126\uffaa\001\002\000\034\003\uffae\020\uffae" +
    "\023\uffae\024\uffae\027\uffae\033\uffae\046\uffae\053\uffae\055" +
    "\uffae\123\uffae\124\uffae\125\uffae\126\uffae\001\002\000\034" +
    "\003\uffab\020\uffab\023\uffab\024\uffab\027\uffab\033\uffab\046" +
    "\uffab\053\uffab\055\uffab\123\uffab\124\uffab\125\uffab\126\uffab" +
    "\001\002\000\034\003\uffac\020\uffac\023\uffac\024\uffac\027" +
    "\uffac\033\uffac\046\uffac\053\uffac\055\uffac\123\uffac\124\uffac" +
    "\125\uffac\126\uffac\001\002\000\034\003\110\020\054\023" +
    "\uffb1\024\uffb1\027\067\033\066\046\060\053\uffb1\055\061" +
    "\123\112\124\uffb1\125\uffb1\126\uffb1\001\002\000\004\067" +
    "\143\001\002\000\004\024\142\001\002\000\012\003\116" +
    "\070\113\071\114\110\115\001\002\000\004\067\uffa8\001" +
    "\002\000\004\067\uffa7\001\002\000\012\123\121\124\123" +
    "\125\120\126\117\001\002\000\004\067\uffa5\001\002\000" +
    "\034\061\uffa1\063\uffa1\067\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\113\uffa1\114\uffa1\115\uffa1\116" +
    "\uffa1\001\002\000\034\061\uffa2\063\uffa2\067\uffa2\100\uffa2" +
    "\101\uffa2\102\uffa2\103\uffa2\104\uffa2\105\uffa2\113\uffa2\114" +
    "\uffa2\115\uffa2\116\uffa2\001\002\000\034\061\uffa4\063\uffa4" +
    "\067\uffa4\100\uffa4\101\uffa4\102\uffa4\103\uffa4\104\uffa4\105" +
    "\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\001\002\000\034" +
    "\061\127\063\136\067\uffa9\100\130\101\126\102\131\103" +
    "\125\104\140\105\124\113\137\114\133\115\134\116\135" +
    "\001\002\000\034\061\uffa3\063\uffa3\067\uffa3\100\uffa3\101" +
    "\uffa3\102\uffa3\103\uffa3\104\uffa3\105\uffa3\113\uffa3\114\uffa3" +
    "\115\uffa3\116\uffa3\001\002\000\012\123\uff91\124\uff91\125" +
    "\uff91\126\uff91\001\002\000\012\123\uff94\124\uff94\125\uff94" +
    "\126\uff94\001\002\000\012\123\uff96\124\uff96\125\uff96\126" +
    "\uff96\001\002\000\012\123\uff8c\124\uff8c\125\uff8c\126\uff8c" +
    "\001\002\000\012\123\uff97\124\uff97\125\uff97\126\uff97\001" +
    "\002\000\012\123\uff95\124\uff95\125\uff95\126\uff95\001\002" +
    "\000\012\123\121\124\123\125\120\126\117\001\002\000" +
    "\012\123\uff8f\124\uff8f\125\uff8f\126\uff8f\001\002\000\012" +
    "\123\uff8e\124\uff8e\125\uff8e\126\uff8e\001\002\000\012\123" +
    "\uff8d\124\uff8d\125\uff8d\126\uff8d\001\002\000\012\123\uff93" +
    "\124\uff93\125\uff93\126\uff93\001\002\000\012\123\uff90\124" +
    "\uff90\125\uff90\126\uff90\001\002\000\012\123\uff92\124\uff92" +
    "\125\uff92\126\uff92\001\002\000\004\067\uffa6\001\002\000" +
    "\034\003\uffcb\020\uffcb\023\uffcb\024\uffcb\027\uffcb\033\uffcb" +
    "\046\uffcb\053\uffcb\055\uffcb\123\uffcb\124\uffcb\125\uffcb\126" +
    "\uffcb\001\002\000\034\003\uffc6\020\uffc6\023\uffc6\024\uffc6" +
    "\027\uffc6\033\uffc6\046\uffc6\053\uffc6\055\uffc6\123\uffc6\124" +
    "\uffc6\125\uffc6\126\uffc6\001\002\000\016\023\uffb0\024\uffb0" +
    "\053\uffb0\124\uffb0\125\uffb0\126\uffb0\001\002\000\034\003" +
    "\uffaf\020\uffaf\023\uffaf\024\uffaf\027\uffaf\033\uffaf\046\uffaf" +
    "\053\uffaf\055\uffaf\123\uffaf\124\uffaf\125\uffaf\126\uffaf\001" +
    "\002\000\004\021\147\001\002\000\004\017\150\001\002" +
    "\000\022\003\110\020\054\024\uffb1\027\067\033\066\046" +
    "\060\055\061\123\112\001\002\000\004\024\152\001\002" +
    "\000\034\003\uffc9\020\uffc9\023\uffc9\024\uffc9\027\uffc9\033" +
    "\uffc9\046\uffc9\053\uffc9\055\uffc9\123\uffc9\124\uffc9\125\uffc9" +
    "\126\uffc9\001\002\000\004\124\154\001\002\000\004\021" +
    "\155\001\002\000\004\017\156\001\002\000\022\003\110" +
    "\020\054\024\uffb1\027\067\033\066\046\060\055\061\123" +
    "\112\001\002\000\004\024\160\001\002\000\034\003\uffca" +
    "\020\uffca\023\uffca\024\uffca\027\uffca\033\uffca\046\uffca\053" +
    "\uffca\055\uffca\123\uffca\124\uffca\125\uffca\126\uffca\001\002" +
    "\000\004\042\221\001\002\000\060\003\uffb3\020\uffb3\023" +
    "\uffb3\024\uffb3\027\uffb3\033\uffb3\042\uffb3\046\uffb3\053\uffb3" +
    "\055\uffb3\060\uffb3\064\uffb3\072\uffb3\073\uffb3\074\uffb3\075" +
    "\uffb3\076\uffb3\077\uffb3\105\uffb3\123\uffb3\124\uffb3\125\uffb3" +
    "\126\uffb3\001\002\000\006\104\216\123\215\001\002\000" +
    "\040\003\uffba\020\uffba\023\uffba\024\uffba\027\uffba\033\uffba" +
    "\042\uffba\046\uffba\053\uffba\055\uffba\105\uffba\123\uffba\124" +
    "\uffba\125\uffba\126\uffba\001\002\000\060\003\uffb2\020\uffb2" +
    "\023\uffb2\024\uffb2\027\uffb2\033\uffb2\042\uffb2\046\uffb2\053" +
    "\uffb2\055\uffb2\060\uffb2\064\uffb2\072\uffb2\073\uffb2\074\uffb2" +
    "\075\uffb2\076\uffb2\077\uffb2\105\uffb2\123\uffb2\124\uffb2\125" +
    "\uffb2\126\uffb2\001\002\000\040\003\uffb8\020\uffb8\023\uffb8" +
    "\024\uffb8\027\uffb8\033\uffb8\042\uffb8\046\uffb8\053\uffb8\055" +
    "\uffb8\105\uffb8\123\uffb8\124\uffb8\125\uffb8\126\uffb8\001\002" +
    "\000\040\003\uffbc\020\uffbc\023\uffbc\024\uffbc\027\uffbc\033" +
    "\uffbc\042\uffbc\046\uffbc\053\uffbc\055\uffbc\105\uffbc\123\uffbc" +
    "\124\uffbc\125\uffbc\126\uffbc\001\002\000\022\060\205\064" +
    "\206\072\202\073\207\074\201\075\204\076\200\077\177" +
    "\001\002\000\040\003\uffb9\020\uffb9\023\uffb9\024\uffb9\027" +
    "\uffb9\033\uffb9\042\uffb9\046\uffb9\053\uffb9\055\uffb9\105\uffb9" +
    "\123\uffb9\124\uffb9\125\uffb9\126\uffb9\001\002\000\010\123" +
    "\173\124\162\125\165\001\002\000\060\003\uffb4\020\uffb4" +
    "\023\uffb4\024\uffb4\027\uffb4\033\uffb4\042\uffb4\046\uffb4\053" +
    "\uffb4\055\uffb4\060\uffb4\064\uffb4\072\uffb4\073\uffb4\074\uffb4" +
    "\075\uffb4\076\uffb4\077\uffb4\105\uffb4\123\uffb4\124\uffb4\125" +
    "\uffb4\126\uffb4\001\002\000\040\003\uffbd\020\uffbd\023\uffbd" +
    "\024\uffbd\027\uffbd\033\uffbd\042\uffbd\046\uffbd\053\uffbd\055" +
    "\uffbd\105\uffbd\123\uffbd\124\uffbd\125\uffbd\126\uffbd\001\002" +
    "\000\004\105\176\001\002\000\022\060\205\064\206\072" +
    "\202\073\207\074\201\075\204\076\200\077\177\001\002" +
    "\000\012\104\uff8b\123\uff8b\124\uff8b\125\uff8b\001\002\000" +
    "\012\104\uff86\123\uff86\124\uff86\125\uff86\001\002\000\012" +
    "\104\uff88\123\uff88\124\uff88\125\uff88\001\002\000\012\104" +
    "\uff8a\123\uff8a\124\uff8a\125\uff8a\001\002\000\004\104\210" +
    "\001\002\000\012\104\uff87\123\uff87\124\uff87\125\uff87\001" +
    "\002\000\012\104\uff84\123\uff84\124\uff84\125\uff84\001\002" +
    "\000\012\104\uff85\123\uff85\124\uff85\125\uff85\001\002\000" +
    "\012\104\uff89\123\uff89\124\uff89\125\uff89\001\002\000\010" +
    "\123\173\124\162\125\165\001\002\000\004\105\212\001" +
    "\002\000\040\003\uffbb\020\uffbb\023\uffbb\024\uffbb\027\uffbb" +
    "\033\uffbb\042\uffbb\046\uffbb\053\uffbb\055\uffbb\105\uffbb\123" +
    "\uffbb\124\uffbb\125\uffbb\126\uffbb\001\002\000\010\123\173" +
    "\124\162\125\165\001\002\000\040\003\uffb5\020\uffb5\023" +
    "\uffb5\024\uffb5\027\uffb5\033\uffb5\042\uffb5\046\uffb5\053\uffb5" +
    "\055\uffb5\105\uffb5\123\uffb5\124\uffb5\125\uffb5\126\uffb5\001" +
    "\002\000\040\003\uffb7\020\uffb7\023\uffb7\024\uffb7\027\uffb7" +
    "\033\uffb7\042\uffb7\046\uffb7\053\uffb7\055\uffb7\105\uffb7\123" +
    "\uffb7\124\uffb7\125\uffb7\126\uffb7\001\002\000\010\123\173" +
    "\124\162\125\165\001\002\000\004\105\220\001\002\000" +
    "\040\003\uffb6\020\uffb6\023\uffb6\024\uffb6\027\uffb6\033\uffb6" +
    "\042\uffb6\046\uffb6\053\uffb6\055\uffb6\105\uffb6\123\uffb6\124" +
    "\uffb6\125\uffb6\126\uffb6\001\002\000\004\123\112\001\002" +
    "\000\004\067\223\001\002\000\004\023\224\001\002\000" +
    "\004\123\112\001\002\000\004\067\226\001\002\000\034" +
    "\003\uffc7\020\uffc7\023\uffc7\024\uffc7\027\uffc7\033\uffc7\046" +
    "\uffc7\053\uffc7\055\uffc7\123\uffc7\124\uffc7\125\uffc7\126\uffc7" +
    "\001\002\000\006\024\uffd4\123\uffd4\001\002\000\004\021" +
    "\240\001\002\000\022\003\166\025\171\051\164\062\163" +
    "\104\172\123\173\124\162\125\165\001\002\000\004\105" +
    "\233\001\002\000\004\021\234\001\002\000\004\017\235" +
    "\001\002\000\022\003\110\020\054\024\uffb1\027\067\033" +
    "\066\046\060\055\061\123\112\001\002\000\004\024\237" +
    "\001\002\000\034\003\uffcd\020\uffcd\023\uffcd\024\uffcd\027" +
    "\uffcd\033\uffcd\046\uffcd\053\uffcd\055\uffcd\123\uffcd\124\uffcd" +
    "\125\uffcd\126\uffcd\001\002\000\004\017\241\001\002\000" +
    "\022\003\110\020\054\024\uffb1\027\067\033\066\046\060" +
    "\055\061\123\112\001\002\000\004\024\243\001\002\000" +
    "\034\003\uffcc\020\uffcc\023\uffcc\024\uffcc\027\uffcc\033\uffcc" +
    "\046\uffcc\053\uffcc\055\uffcc\123\uffcc\124\uffcc\125\uffcc\126" +
    "\uffcc\001\002\000\004\053\245\001\002\000\022\003\166" +
    "\025\171\051\164\062\163\104\172\123\173\124\162\125" +
    "\165\001\002\000\034\003\uffc8\020\uffc8\023\uffc8\024\uffc8" +
    "\027\uffc8\033\uffc8\046\uffc8\053\uffc8\055\uffc8\123\uffc8\124" +
    "\uffc8\125\uffc8\126\uffc8\001\002\000\004\110\250\001\002" +
    "\000\012\123\121\124\123\125\120\126\117\001\002\000" +
    "\004\067\252\001\002\000\004\024\253\001\002\000\010" +
    "\017\uffdd\031\uffdd\041\uffdd\001\002\000\004\037\255\001" +
    "\002\000\012\023\uffc4\124\263\125\257\126\256\001\002" +
    "\000\010\003\uffc0\067\uffc0\112\uffc0\001\002\000\010\003" +
    "\uffbe\067\uffbe\112\uffbe\001\002\000\004\023\271\001\002" +
    "\000\012\023\uffc4\124\263\125\257\126\256\001\002\000" +
    "\006\003\264\112\265\001\002\000\010\003\uffbf\067\uffbf" +
    "\112\uffbf\001\002\000\030\003\110\020\054\023\uffb1\027" +
    "\067\033\066\046\060\055\061\123\112\124\uffb1\125\uffb1" +
    "\126\uffb1\001\002\000\030\003\110\020\054\023\uffb1\027" +
    "\067\033\066\046\060\055\061\123\112\124\uffb1\125\uffb1" +
    "\126\uffb1\001\002\000\012\023\uffc2\124\uffc2\125\uffc2\126" +
    "\uffc2\001\002\000\012\023\uffc1\124\uffc1\125\uffc1\126\uffc1" +
    "\001\002\000\004\023\uffc3\001\002\000\004\123\112\001" +
    "\002\000\004\067\273\001\002\000\034\003\uffc5\020\uffc5" +
    "\023\uffc5\024\uffc5\027\uffc5\033\uffc5\046\uffc5\053\uffc5\055" +
    "\uffc5\123\uffc5\124\uffc5\125\uffc5\126\uffc5\001\002\000\020" +
    "\003\065\020\054\027\067\033\066\046\060\055\061\123" +
    "\uffd5\001\002\000\004\123\276\001\002\000\004\110\277" +
    "\001\002\000\012\123\121\124\123\125\120\126\117\001" +
    "\002\000\004\067\301\001\002\000\004\024\302\001\002" +
    "\000\010\017\uffdc\031\uffdc\041\uffdc\001\002\000\010\017" +
    "\uffdb\031\uffdb\041\uffdb\001\002\000\004\017\ufff6\001\002" +
    "\000\020\003\065\020\054\024\uffd5\027\067\033\066\046" +
    "\060\055\061\001\002\000\004\024\307\001\002\000\004" +
    "\002\ufffe\001\002\000\004\017\ufff5\001\002\000\010\017" +
    "\ufff7\031\015\041\022\001\002\000\004\017\ufffb\001\002" +
    "\000\016\003\ufff0\017\ufff0\031\ufff0\041\ufff0\054\ufff0\123" +
    "\ufff0\001\002\000\004\077\320\001\002\000\012\017\ufff4" +
    "\031\ufff4\041\ufff4\054\ufff4\001\002\000\016\003\313\017" +
    "\ufff3\031\ufff3\041\ufff3\054\ufff3\123\314\001\002\000\012" +
    "\017\ufff2\031\ufff2\041\ufff2\054\ufff2\001\002\000\010\124" +
    "\263\125\257\126\256\001\002\000\004\067\322\001\002" +
    "\000\016\003\ufff1\017\ufff1\031\ufff1\041\ufff1\054\ufff1\123" +
    "\ufff1\001\002\000\004\024\351\001\002\000\004\104\325" +
    "\001\002\000\010\003\027\105\uffda\123\030\001\002\000" +
    "\004\105\327\001\002\000\006\003\330\112\331\001\002" +
    "\000\004\017\342\001\002\000\020\005\033\007\034\011" +
    "\037\012\040\014\041\015\032\016\036\001\002\000\004" +
    "\017\333\001\002\000\020\003\065\020\054\027\067\033" +
    "\066\046\060\055\061\123\uffd5\001\002\000\004\123\335" +
    "\001\002\000\004\110\336\001\002\000\012\123\121\124" +
    "\123\125\120\126\117\001\002\000\004\067\340\001\002" +
    "\000\004\024\341\001\002\000\010\017\uffe0\031\uffe0\041" +
    "\uffe0\001\002\000\020\003\065\020\054\027\067\033\066" +
    "\046\060\055\061\123\uffd5\001\002\000\004\123\344\001" +
    "\002\000\004\110\345\001\002\000\012\123\121\124\123" +
    "\125\120\126\117\001\002\000\004\067\347\001\002\000" +
    "\004\024\350\001\002\000\010\017\uffdf\031\uffdf\041\uffdf" +
    "\001\002\000\010\017\uffde\031\uffde\041\uffde\001\002\000" +
    "\004\017\uffe2\001\002\000\020\003\355\020\054\024\uffd5" +
    "\027\067\033\066\046\060\055\061\001\002\000\004\024" +
    "\357\001\002\000\022\003\uffce\020\uffce\024\356\027\uffce" +
    "\033\uffce\046\uffce\055\uffce\067\143\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\uffff\001\002\000\004\024\363" +
    "\001\002\000\022\003\uffce\020\uffce\024\362\027\uffce\033" +
    "\uffce\046\uffce\055\uffce\067\143\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\000\001\002\000\012\017\uffee\031" +
    "\uffee\041\uffee\123\365\001\002\000\010\003\370\066\372" +
    "\112\371\001\002\000\010\017\uffef\031\uffef\041\uffef\001" +
    "\002\000\012\017\uffeb\031\uffeb\041\uffeb\123\uffeb\001\002" +
    "\000\026\003\377\004\u0101\005\033\007\034\011\037\012" +
    "\040\014\041\015\032\016\036\112\u010e\001\002\000\024" +
    "\003\377\004\u0101\005\033\007\034\011\037\012\040\014" +
    "\041\015\032\016\036\001\002\000\004\123\373\001\002" +
    "\000\006\003\370\112\371\001\002\000\012\017\uffec\031" +
    "\uffec\041\uffec\123\uffec\001\002\000\004\067\u010d\001\002" +
    "\000\004\067\uffe7\001\002\000\004\067\uffe5\001\002\000" +
    "\004\067\uffe6\001\002\000\004\106\u0102\001\002\000\004" +
    "\124\u0103\001\002\000\006\107\u0104\111\u0105\001\002\000" +
    "\004\037\u010b\001\002\000\004\111\u0106\001\002\000\004" +
    "\124\u0107\001\002\000\004\107\u0108\001\002\000\004\037" +
    "\u0109\001\002\000\020\005\033\007\034\011\037\012\040" +
    "\014\041\015\032\016\036\001\002\000\004\067\uff99\001" +
    "\002\000\020\005\033\007\034\011\037\012\040\014\041" +
    "\015\032\016\036\001\002\000\004\067\uff98\001\002\000" +
    "\012\017\uffea\031\uffea\041\uffea\123\uffea\001\002\000\024" +
    "\003\377\004\u0101\005\033\007\034\011\037\012\040\014" +
    "\041\015\032\016\036\001\002\000\004\067\u0110\001\002" +
    "\000\012\017\uffe9\031\uffe9\041\uffe9\123\uffe9\001\002\000" +
    "\004\067\u0112\001\002\000\012\017\uffe8\031\uffe8\041\uffe8" +
    "\123\uffe8\001\002\000\010\017\uffed\031\uffed\041\uffed\001" +
    "\002\000\004\017\uffe1\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0113\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\011\010\016\014\020\021\013" +
    "\025\012\026\006\001\001\000\010\021\u0113\025\012\026" +
    "\006\001\001\000\010\015\365\016\363\017\366\001\001" +
    "\000\020\027\357\030\061\040\056\041\054\042\062\043" +
    "\063\046\052\001\001\000\002\001\001\000\010\021\351" +
    "\025\012\026\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\314\012\315\001\001\000\012\014\310" +
    "\021\307\025\012\026\006\001\001\000\002\001\001\000" +
    "\010\021\303\025\012\026\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\045\001\001\000\004\023\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\027\055\030\061\040\056\041\054\042\062\043\063\046" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\035" +
    "\243\036\106\037\101\040\103\041\102\042\104\043\105" +
    "\046\100\001\001\000\002\001\001\000\020\027\226\030" +
    "\061\040\056\041\054\042\062\043\063\046\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\031\160\032\173\033\167\034\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\035\110\036" +
    "\106\037\101\040\103\041\102\042\104\043\105\046\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\035\143\036\106\037\101\040\103\041\102\042" +
    "\104\043\105\046\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\131\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\140\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\035\150\036\106\037\101\040\103\041\102\042\104\043" +
    "\105\046\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\035\156\036\106\037\101\040\103\041\102\042\104" +
    "\043\105\046\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\212\001\001\000\002\001\001" +
    "\000\006\032\174\033\167\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\032" +
    "\210\033\167\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\213\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\216\033\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\037\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\031\231\032\173\033\167\034\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\035\235\036\106\037\101\040\103\041\102\042\104" +
    "\043\105\046\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\035\241\036\106\037\101" +
    "\040\103\041\102\042\104\043\105\046\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\031\245\032\173\033\167\034\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\261\044\257\045\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\261\044\267\045\260\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\035\266\036\106\037\101\040\103\041" +
    "\102\042\104\043\105\046\100\001\001\000\022\035\265" +
    "\036\106\037\101\040\103\041\102\042\104\043\105\046" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\037\271\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\027\274\030\061\040\056\041\054" +
    "\042\062\043\063\046\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\277\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\027\305\030\061\040\056\041\054" +
    "\042\062\043\063\046\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\311\025\012" +
    "\026\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\316\012\315" +
    "\001\001\000\002\001\001\000\004\013\320\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\325\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\331\001\001" +
    "\000\002\001\001\000\020\027\333\030\061\040\056\041" +
    "\054\042\062\043\063\046\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\336\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\027\342" +
    "\030\061\040\056\041\054\042\062\043\063\046\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\345" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\027\353" +
    "\030\061\040\056\041\054\042\062\043\063\046\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\015\u0112\016\363" +
    "\017\366\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\377\005\375\020\u010e\001\001" +
    "\000\010\004\377\005\375\020\374\001\001\000\004\017" +
    "\373\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\u0109\001\001" +
    "\000\002\001\001\000\004\004\u010b\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\377\005\375\020\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private int contadorErrores = 0;
    private ArrayList<String> errores = new ArrayList<String>();

    @Override
    public void syntax_error(Symbol cur_token){
        try{
            reportar_error("Error de sintaxis en token " + cur_token.value.toString() + ".", cur_token);
        }catch(Exception E){}
    }
    @Override
    public void unrecovered_syntax_error(Symbol cur_token){
        if(cur_token == null || cur_token.value == null) { //No se encontró token END
            reportar_error("Error fatal de sintaxis al final del programa.", null);
        }
        else { //Por si acaso
            reportar_error("Error fatal de sintaxis en " + cur_token.value.toString(), cur_token);
        }
        
    }

    public void imprimirErrores() {
        System.out.println("\nErrores sintácticos: ");
        for (String error : errores) {
            System.out.println(error);
        }
    }

    public void reportar_error(String message, Object info) {
        contadorErrores++;
        StringBuilder m = new StringBuilder("Error #" + contadorErrores);
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" en la línea "+(s.left+1));
                if (s.right >= 0)
                    m.append(", columna "+(s.right+1));
            }
        }
        m.append(" : " + message);
        errores.add(m.toString());
    }

    public void append_error(String message) {
        if (errores.size() != 0) {
            int lastIndex = errores.size() - 1;
            String texto = errores.get(lastIndex);
            errores.set(lastIndex, texto + "\n\t" + message);
        }
        else {
            reportar_error(message, null);
        }
            
    }

    /* Reporte de error encontrado. */
    @Override
    public void report_error(String message, Object info) {
        reportar_error(message, info);
    }
   
    /* Cuando se encuentra un error de donde el sistema no puede
        recuperarse, se lanza un error fatal. Se despliega el mensaje
        de error y se finaliza la ejecución. */
    @Override
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    /* Metodo main para garantizar la ejecucion del analizador
       lexico y sintactico, ademas que se pase como parametro la tabla
       de simbolos correspondiente. */
    public static void main(String[] args){
        try {
            //System.out.println("\nResultados finales:");
            Scanner scanner = new Scanner(new FileReader(args[0]));
            Parser parser = new Parser(scanner);
            //Object result = parser.parse().value;
            Symbol parse_tree = null;
            parse_tree = parser.parse();
            scanner.imprimirErrores();
            parser.imprimirErrores();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaracion_programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaracion_programa ::= PR_PROGRAM IDENTIFICADOR PR_BEGIN seccion_instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaracion_programa ::= PR_PROGRAM IDENTIFICADOR secciones_opcionales PR_BEGIN seccion_instrucciones PR_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaracion_programa ::= PR_PROGRAM IDENTIFICADOR error PR_BEGIN seccion_instrucciones PR_END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int beginleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int beginright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object begin = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 //Secciones opcionales
                parser.reportar_error("Error en sección de declaraciones", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaracion_programa ::= PR_PROGRAM IDENTIFICADOR secciones_opcionales PR_BEGIN error PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //Secciones de instrucciones
                parser.reportar_error("Error en sección de instrucciones", end);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaracion_programa ::= PR_PROGRAM IDENTIFICADOR PR_BEGIN error PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //Secciones de instrucciones
                parser.reportar_error("Error en sección de instrucciones", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_programa",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // secciones_opcionales ::= seccion_constantes seccion_globales seccion_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // secciones_opcionales ::= seccion_constantes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // secciones_opcionales ::= seccion_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // secciones_opcionales ::= seccion_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // secciones_opcionales ::= seccion_constantes seccion_globales 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // secciones_opcionales ::= seccion_globales seccion_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // secciones_opcionales ::= seccion_constantes seccion_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("secciones_opcionales",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seccion_constantes ::= TIPO_CONST seccion_constantes1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_constantes",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seccion_constantes1 ::= declaracion_constante 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_constantes1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seccion_constantes1 ::= declaracion_constante seccion_constantes1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_constantes1",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion_constante ::= IDENTIFICADOR OP_IGUAL declaracion_constante1 SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_constante",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_constante ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //si no viene un identificador pero sí :
                parser.reportar_error("Error en declaración de constante", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_constante",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // seccion_globales ::= PR_VAR seccion_globales1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_globales",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // seccion_globales1 ::= declaracion_global 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_globales1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // seccion_globales1 ::= declaracion_global seccion_globales1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_globales1",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracion_global ::= IDENTIFICADOR OP_COMA declaracion_global1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracion_global ::= declaracion_global1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion_global1 ::= IDENTIFICADOR OP_DOSPUNTOS declaracion_global2 SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion_global1 ::= IDENTIFICADOR error declaracion_global2 SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                parser.reportar_error("Instrucción incorrecta", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declaracion_global1 ::= IDENTIFICADOR error OP_DOSPUNTOS declaracion_global2 SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 //si no viene un identificador pero sí :
                parser.reportar_error("Esperando identificador", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declaracion_global2 ::= array 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declaracion_global2 ::= tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declaracion_global2 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                parser.reportar_error("Mala declaracion de tipo", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_global2",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // seccion_funciones ::= function 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_funciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // seccion_funciones ::= procedure 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_funciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // seccion_funciones ::= function seccion_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_funciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // seccion_funciones ::= procedure seccion_funciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_funciones",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function ::= PR_FUNCTION IDENTIFICADOR PARENTIZQ parametros PARENTDER OP_DOSPUNTOS tipo PR_BEGIN seccion_instrucciones IDENTIFICADOR OP_DOSPUNTOSIGUAL retorno SEMI PR_END 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                if (!id1.equals(id2)) {
                    parser.reportar_error("Error de nombre de función y valor de retorno", id2);
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function ::= PR_FUNCTION IDENTIFICADOR PARENTIZQ parametros PARENTDER error PR_BEGIN seccion_instrucciones IDENTIFICADOR OP_DOSPUNTOSIGUAL retorno SEMI PR_END 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                //parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Las funciones deben de tener valor de retorno");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function ::= PR_FUNCTION error PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                parser.reportar_error("Mala declaracion de función", e);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure ::= PR_PROCEDURE IDENTIFICADOR PARENTIZQ parametros PARENTDER PR_BEGIN seccion_instrucciones IDENTIFICADOR OP_DOSPUNTOSIGUAL retorno SEMI PR_END 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object id1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                if (!id1.equals(id2)) {
                    parser.reportar_error("Error de nombre de procedimiento y valor de retorno", id2);
                }     
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure ::= PR_PROCEDURE IDENTIFICADOR PARENTIZQ parametros PARENTDER error PR_BEGIN seccion_instrucciones IDENTIFICADOR OP_DOSPUNTOSIGUAL retorno SEMI PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Los procedimientos no pueden tener valor de retorno");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure ::= PR_PROCEDURE error PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Mala declaracion de procedimiento");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros ::= IDENTIFICADOR OP_DOSPUNTOS tipo parametros1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parametros ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Error en lista de parámetros");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros1",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros1 ::= OP_COMA IDENTIFICADOR OP_DOSPUNTOS tipo parametros1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parametros1",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // seccion_instrucciones ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // seccion_instrucciones ::= seccion_instrucciones1 seccion_instrucciones 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // seccion_instrucciones1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // seccion_instrucciones1 ::= bloque_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seccion_instrucciones1 ::= bloque_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // seccion_instrucciones1 ::= bloque_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // seccion_instrucciones1 ::= bloque_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // seccion_instrucciones1 ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Error en el cuerpo de instrucciones");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("seccion_instrucciones1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloque_while ::= PR_WHILE PARENTIZQ condicion_booleana PARENTDER PR_DO PR_BEGIN cuerpo_estructura_control PR_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloque_while ::= PR_WHILE error PR_DO PR_BEGIN cuerpo_estructura_control PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                //parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Falta expresión en while");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_while",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloque_for ::= PR_FOR IDENTIFICADOR OP_DOSPUNTOSIGUAL ENTERO PR_TO ENTERO PR_DO PR_BEGIN cuerpo_estructura_control PR_END 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloque_for ::= PR_FOR error PR_TO ENTERO PR_DO PR_BEGIN cuerpo_estructura_control PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Expresión no es una asignación");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // bloque_for ::= PR_FOR IDENTIFICADOR OP_DOSPUNTOSIGUAL ENTERO error ENTERO PR_DO PR_BEGIN cuerpo_estructura_control PR_END 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 
                //parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Falta palabra reservada TO en for");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_for",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // bloque_repeat ::= PR_REPEAT cuerpo_estructura_control PR_UNTIL condicion_booleana 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_repeat",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bloque_if ::= PR_IF condicion_booleana PR_THEN sentencia SEMI PR_ELSE sentencia SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_if",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // bloque_if ::= error SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Error en if");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_if",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // bloque_case ::= PR_CASE IDENTIFICADOR PR_OF bloque_constantes_case PR_ELSE sentencia SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_case",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // bloque_constantes_case ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_constantes_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bloque_constantes_case ::= bloque_constantes_case1 bloque_constantes_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_constantes_case",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloque_constantes_case1 ::= declaracion_constante1 OP_DOSPUNTOS cuerpo_estructura_control 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_constantes_case1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloque_constantes_case1 ::= declaracion_constante1 error cuerpo_estructura_control 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Falta caracter : en case");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloque_constantes_case1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaracion_constante1 ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_constante1",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaracion_constante1 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_constante1",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // declaracion_constante1 ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaracion_constante1",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // condicion_booleana ::= condicion_booleana1 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // condicion_booleana ::= condicion_not 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // condicion_booleana ::= PARENTIZQ condicion_booleana1 PARENTDER operador_booleano PARENTIZQ condicion_booleana1 PARENTDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // condicion_booleana ::= PR_TRUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // condicion_booleana ::= PR_FALSE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // condicion_booleana ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol) CUP$Parser$stack.peek());
                parser.append_error("Error en condición booleana");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // condicion_not ::= OP_NOT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_not",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // condicion_not ::= OP_NOT PARENTIZQ condicion_booleana1 PARENTDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_not",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // condicion_booleana1 ::= condicion_booleana2 operador_booleano condicion_booleana2 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // condicion_booleana2 ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // condicion_booleana2 ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // condicion_booleana2 ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("condicion_booleana2",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // cuerpo_estructura_control ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // cuerpo_estructura_control ::= cuerpo_estructura_control1 cuerpo_estructura_control 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // cuerpo_estructura_control1 ::= sentencia SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // cuerpo_estructura_control1 ::= bloque_while 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // cuerpo_estructura_control1 ::= bloque_if 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // cuerpo_estructura_control1 ::= bloque_case 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // cuerpo_estructura_control1 ::= bloque_repeat 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // cuerpo_estructura_control1 ::= bloque_for 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cuerpo_estructura_control1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= IDENTIFICADOR OP_DOSPUNTOSIGUAL retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= IDENTIFICADOR OP_SUMASUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= IDENTIFICADOR OP_MENOSMENOS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia ::= IDENTIFICADOR OP_DOSPUNTOSIGUAL retorno operador_aritmetico retorno 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sentencia ::= IDENTIFICADOR error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                parser.syntax_error((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top));
                parser.append_error("Error en sentencia");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentencia",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // retorno ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // retorno ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // retorno ::= REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // retorno ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("retorno",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipo ::= TIPO_INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipo ::= TIPO_LONGINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipo ::= TIPO_SHORTINT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipo ::= TIPO_CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipo ::= TIPO_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipo ::= TIPO_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tipo ::= TIPO_REAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // array ::= TIPO_ARRAY OP_BRACKETIZQ ENTERO OP_PUNTO OP_PUNTO ENTERO OP_BRACKETDER PR_OF tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // array ::= TIPO_ARRAY OP_BRACKETIZQ ENTERO OP_BRACKETDER PR_OF tipo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operador_aritmetico ::= OP_SUMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operador_aritmetico ::= OP_RESTA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // operador_aritmetico ::= OP_MULT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // operador_aritmetico ::= OP_DIVISION 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // operador_aritmetico ::= OP_MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // operador_aritmetico ::= PARENTIZQ 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // operador_aritmetico ::= PARENTDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // operador_aritmetico ::= OP_MASIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // operador_aritmetico ::= OP_MENOSIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // operador_aritmetico ::= OP_MULTIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // operador_aritmetico ::= OP_DIVIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operador_aritmetico ::= OP_DIV 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_aritmetico",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operador_booleano ::= OP_IGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operador_booleano ::= OP_MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operador_booleano ::= OP_MAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operador_booleano ::= OP_MENORIGUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operador_booleano ::= OP_MENOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operador_booleano ::= OP_MENORMAYOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operador_booleano ::= OP_OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operador_booleano ::= OP_AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("operador_booleano",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
